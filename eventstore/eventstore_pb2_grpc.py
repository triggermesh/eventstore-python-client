# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import eventstore_pb2 as eventstore__pb2


class KVStub(object):
    """KV interface
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Set = channel.unary_unary(
                '/protob.KV/Set',
                request_serializer=eventstore__pb2.SetKVRequest.SerializeToString,
                response_deserializer=eventstore__pb2.SetKVResponse.FromString,
                )
        self.Incr = channel.unary_unary(
                '/protob.KV/Incr',
                request_serializer=eventstore__pb2.IncrKVRequest.SerializeToString,
                response_deserializer=eventstore__pb2.IncrKVResponse.FromString,
                )
        self.Decr = channel.unary_unary(
                '/protob.KV/Decr',
                request_serializer=eventstore__pb2.DecrKVRequest.SerializeToString,
                response_deserializer=eventstore__pb2.DecrKVResponse.FromString,
                )
        self.Del = channel.unary_unary(
                '/protob.KV/Del',
                request_serializer=eventstore__pb2.DelKVRequest.SerializeToString,
                response_deserializer=eventstore__pb2.DelKVResponse.FromString,
                )
        self.Get = channel.unary_unary(
                '/protob.KV/Get',
                request_serializer=eventstore__pb2.GetKVRequest.SerializeToString,
                response_deserializer=eventstore__pb2.GetKVResponse.FromString,
                )
        self.Lock = channel.unary_unary(
                '/protob.KV/Lock',
                request_serializer=eventstore__pb2.LockRequest.SerializeToString,
                response_deserializer=eventstore__pb2.LockResponse.FromString,
                )
        self.Unlock = channel.unary_unary(
                '/protob.KV/Unlock',
                request_serializer=eventstore__pb2.UnlockRequest.SerializeToString,
                response_deserializer=eventstore__pb2.UnlockResponse.FromString,
                )


class KVServicer(object):
    """KV interface
    """

    def Set(self, request, context):
        """Set KV at storage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Incr(self, request, context):
        """Incr increments an integer value from storage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Decr(self, request, context):
        """Decr decrements an integer value from storage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Del(self, request, context):
        """Del item from storage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Get item from storage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Lock(self, request, context):
        """Lock the key for exclusive access
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unlock(self, request, context):
        """Unlock the key
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KVServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Set': grpc.unary_unary_rpc_method_handler(
                    servicer.Set,
                    request_deserializer=eventstore__pb2.SetKVRequest.FromString,
                    response_serializer=eventstore__pb2.SetKVResponse.SerializeToString,
            ),
            'Incr': grpc.unary_unary_rpc_method_handler(
                    servicer.Incr,
                    request_deserializer=eventstore__pb2.IncrKVRequest.FromString,
                    response_serializer=eventstore__pb2.IncrKVResponse.SerializeToString,
            ),
            'Decr': grpc.unary_unary_rpc_method_handler(
                    servicer.Decr,
                    request_deserializer=eventstore__pb2.DecrKVRequest.FromString,
                    response_serializer=eventstore__pb2.DecrKVResponse.SerializeToString,
            ),
            'Del': grpc.unary_unary_rpc_method_handler(
                    servicer.Del,
                    request_deserializer=eventstore__pb2.DelKVRequest.FromString,
                    response_serializer=eventstore__pb2.DelKVResponse.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=eventstore__pb2.GetKVRequest.FromString,
                    response_serializer=eventstore__pb2.GetKVResponse.SerializeToString,
            ),
            'Lock': grpc.unary_unary_rpc_method_handler(
                    servicer.Lock,
                    request_deserializer=eventstore__pb2.LockRequest.FromString,
                    response_serializer=eventstore__pb2.LockResponse.SerializeToString,
            ),
            'Unlock': grpc.unary_unary_rpc_method_handler(
                    servicer.Unlock,
                    request_deserializer=eventstore__pb2.UnlockRequest.FromString,
                    response_serializer=eventstore__pb2.UnlockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protob.KV', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KV(object):
    """KV interface
    """

    @staticmethod
    def Set(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.KV/Set',
            eventstore__pb2.SetKVRequest.SerializeToString,
            eventstore__pb2.SetKVResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Incr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.KV/Incr',
            eventstore__pb2.IncrKVRequest.SerializeToString,
            eventstore__pb2.IncrKVResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Decr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.KV/Decr',
            eventstore__pb2.DecrKVRequest.SerializeToString,
            eventstore__pb2.DecrKVResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Del(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.KV/Del',
            eventstore__pb2.DelKVRequest.SerializeToString,
            eventstore__pb2.DelKVResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.KV/Get',
            eventstore__pb2.GetKVRequest.SerializeToString,
            eventstore__pb2.GetKVResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Lock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.KV/Lock',
            eventstore__pb2.LockRequest.SerializeToString,
            eventstore__pb2.LockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.KV/Unlock',
            eventstore__pb2.UnlockRequest.SerializeToString,
            eventstore__pb2.UnlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MapStub(object):
    """Map interface
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.New = channel.unary_unary(
                '/protob.Map/New',
                request_serializer=eventstore__pb2.NewMapRequest.SerializeToString,
                response_deserializer=eventstore__pb2.NewMapResponse.FromString,
                )
        self.GetAll = channel.unary_unary(
                '/protob.Map/GetAll',
                request_serializer=eventstore__pb2.GetAllMapFieldsRequest.SerializeToString,
                response_deserializer=eventstore__pb2.GetAllMapFieldsResponse.FromString,
                )
        self.Len = channel.unary_unary(
                '/protob.Map/Len',
                request_serializer=eventstore__pb2.LenMapRequest.SerializeToString,
                response_deserializer=eventstore__pb2.LenMapResponse.FromString,
                )
        self.Del = channel.unary_unary(
                '/protob.Map/Del',
                request_serializer=eventstore__pb2.DelMapRequest.SerializeToString,
                response_deserializer=eventstore__pb2.DelMapResponse.FromString,
                )
        self.FieldSet = channel.unary_unary(
                '/protob.Map/FieldSet',
                request_serializer=eventstore__pb2.SetMapFieldRequest.SerializeToString,
                response_deserializer=eventstore__pb2.SetMapFieldResponse.FromString,
                )
        self.FieldIncr = channel.unary_unary(
                '/protob.Map/FieldIncr',
                request_serializer=eventstore__pb2.IncrMapFieldRequest.SerializeToString,
                response_deserializer=eventstore__pb2.IncrMapFieldResponse.FromString,
                )
        self.FieldDecr = channel.unary_unary(
                '/protob.Map/FieldDecr',
                request_serializer=eventstore__pb2.DecrMapFieldRequest.SerializeToString,
                response_deserializer=eventstore__pb2.DecrMapFieldResponse.FromString,
                )
        self.FieldDel = channel.unary_unary(
                '/protob.Map/FieldDel',
                request_serializer=eventstore__pb2.DelMapFieldRequest.SerializeToString,
                response_deserializer=eventstore__pb2.DelMapFieldResponse.FromString,
                )
        self.FieldGet = channel.unary_unary(
                '/protob.Map/FieldGet',
                request_serializer=eventstore__pb2.GetMapFieldRequest.SerializeToString,
                response_deserializer=eventstore__pb2.GetMapFieldResponse.FromString,
                )
        self.Lock = channel.unary_unary(
                '/protob.Map/Lock',
                request_serializer=eventstore__pb2.LockRequest.SerializeToString,
                response_deserializer=eventstore__pb2.LockResponse.FromString,
                )
        self.Unlock = channel.unary_unary(
                '/protob.Map/Unlock',
                request_serializer=eventstore__pb2.UnlockRequest.SerializeToString,
                response_deserializer=eventstore__pb2.UnlockResponse.FromString,
                )


class MapServicer(object):
    """Map interface
    """

    def New(self, request, context):
        """New map
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAll(self, request, context):
        """GetAll all KVs in map
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Len(self, request, context):
        """Len for the map
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Del(self, request, context):
        """Del map
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FieldSet(self, request, context):
        """FieldSet KV at map
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FieldIncr(self, request, context):
        """FieldIncr increments integer value at map
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FieldDecr(self, request, context):
        """FieldDecr decrements integer value at map
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FieldDel(self, request, context):
        """FieldDel key at map
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FieldGet(self, request, context):
        """FieldGet value at key
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Lock(self, request, context):
        """Lock the map for exclusive access
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unlock(self, request, context):
        """Unlock the map
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'New': grpc.unary_unary_rpc_method_handler(
                    servicer.New,
                    request_deserializer=eventstore__pb2.NewMapRequest.FromString,
                    response_serializer=eventstore__pb2.NewMapResponse.SerializeToString,
            ),
            'GetAll': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAll,
                    request_deserializer=eventstore__pb2.GetAllMapFieldsRequest.FromString,
                    response_serializer=eventstore__pb2.GetAllMapFieldsResponse.SerializeToString,
            ),
            'Len': grpc.unary_unary_rpc_method_handler(
                    servicer.Len,
                    request_deserializer=eventstore__pb2.LenMapRequest.FromString,
                    response_serializer=eventstore__pb2.LenMapResponse.SerializeToString,
            ),
            'Del': grpc.unary_unary_rpc_method_handler(
                    servicer.Del,
                    request_deserializer=eventstore__pb2.DelMapRequest.FromString,
                    response_serializer=eventstore__pb2.DelMapResponse.SerializeToString,
            ),
            'FieldSet': grpc.unary_unary_rpc_method_handler(
                    servicer.FieldSet,
                    request_deserializer=eventstore__pb2.SetMapFieldRequest.FromString,
                    response_serializer=eventstore__pb2.SetMapFieldResponse.SerializeToString,
            ),
            'FieldIncr': grpc.unary_unary_rpc_method_handler(
                    servicer.FieldIncr,
                    request_deserializer=eventstore__pb2.IncrMapFieldRequest.FromString,
                    response_serializer=eventstore__pb2.IncrMapFieldResponse.SerializeToString,
            ),
            'FieldDecr': grpc.unary_unary_rpc_method_handler(
                    servicer.FieldDecr,
                    request_deserializer=eventstore__pb2.DecrMapFieldRequest.FromString,
                    response_serializer=eventstore__pb2.DecrMapFieldResponse.SerializeToString,
            ),
            'FieldDel': grpc.unary_unary_rpc_method_handler(
                    servicer.FieldDel,
                    request_deserializer=eventstore__pb2.DelMapFieldRequest.FromString,
                    response_serializer=eventstore__pb2.DelMapFieldResponse.SerializeToString,
            ),
            'FieldGet': grpc.unary_unary_rpc_method_handler(
                    servicer.FieldGet,
                    request_deserializer=eventstore__pb2.GetMapFieldRequest.FromString,
                    response_serializer=eventstore__pb2.GetMapFieldResponse.SerializeToString,
            ),
            'Lock': grpc.unary_unary_rpc_method_handler(
                    servicer.Lock,
                    request_deserializer=eventstore__pb2.LockRequest.FromString,
                    response_serializer=eventstore__pb2.LockResponse.SerializeToString,
            ),
            'Unlock': grpc.unary_unary_rpc_method_handler(
                    servicer.Unlock,
                    request_deserializer=eventstore__pb2.UnlockRequest.FromString,
                    response_serializer=eventstore__pb2.UnlockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protob.Map', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Map(object):
    """Map interface
    """

    @staticmethod
    def New(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Map/New',
            eventstore__pb2.NewMapRequest.SerializeToString,
            eventstore__pb2.NewMapResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Map/GetAll',
            eventstore__pb2.GetAllMapFieldsRequest.SerializeToString,
            eventstore__pb2.GetAllMapFieldsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Len(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Map/Len',
            eventstore__pb2.LenMapRequest.SerializeToString,
            eventstore__pb2.LenMapResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Del(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Map/Del',
            eventstore__pb2.DelMapRequest.SerializeToString,
            eventstore__pb2.DelMapResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FieldSet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Map/FieldSet',
            eventstore__pb2.SetMapFieldRequest.SerializeToString,
            eventstore__pb2.SetMapFieldResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FieldIncr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Map/FieldIncr',
            eventstore__pb2.IncrMapFieldRequest.SerializeToString,
            eventstore__pb2.IncrMapFieldResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FieldDecr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Map/FieldDecr',
            eventstore__pb2.DecrMapFieldRequest.SerializeToString,
            eventstore__pb2.DecrMapFieldResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FieldDel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Map/FieldDel',
            eventstore__pb2.DelMapFieldRequest.SerializeToString,
            eventstore__pb2.DelMapFieldResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FieldGet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Map/FieldGet',
            eventstore__pb2.GetMapFieldRequest.SerializeToString,
            eventstore__pb2.GetMapFieldResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Lock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Map/Lock',
            eventstore__pb2.LockRequest.SerializeToString,
            eventstore__pb2.LockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Map/Unlock',
            eventstore__pb2.UnlockRequest.SerializeToString,
            eventstore__pb2.UnlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class QueueStub(object):
    """Queue interface
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.New = channel.unary_unary(
                '/protob.Queue/New',
                request_serializer=eventstore__pb2.NewQueueRequest.SerializeToString,
                response_deserializer=eventstore__pb2.NewQueueResponse.FromString,
                )
        self.GetAll = channel.unary_unary(
                '/protob.Queue/GetAll',
                request_serializer=eventstore__pb2.GetAllQueueItemsRequest.SerializeToString,
                response_deserializer=eventstore__pb2.GetAllQueueItemsResponse.FromString,
                )
        self.Len = channel.unary_unary(
                '/protob.Queue/Len',
                request_serializer=eventstore__pb2.LenQueueRequest.SerializeToString,
                response_deserializer=eventstore__pb2.LenQueueResponse.FromString,
                )
        self.Del = channel.unary_unary(
                '/protob.Queue/Del',
                request_serializer=eventstore__pb2.DelQueueRequest.SerializeToString,
                response_deserializer=eventstore__pb2.DelQueueResponse.FromString,
                )
        self.Push = channel.unary_unary(
                '/protob.Queue/Push',
                request_serializer=eventstore__pb2.PushQueueRequest.SerializeToString,
                response_deserializer=eventstore__pb2.PushQueueResponse.FromString,
                )
        self.Index = channel.unary_unary(
                '/protob.Queue/Index',
                request_serializer=eventstore__pb2.IndexQueueRequest.SerializeToString,
                response_deserializer=eventstore__pb2.IndexQueueResponse.FromString,
                )
        self.Pop = channel.unary_unary(
                '/protob.Queue/Pop',
                request_serializer=eventstore__pb2.PopQueueRequest.SerializeToString,
                response_deserializer=eventstore__pb2.PopQueueResponse.FromString,
                )
        self.Peek = channel.unary_unary(
                '/protob.Queue/Peek',
                request_serializer=eventstore__pb2.PeekQueueRequest.SerializeToString,
                response_deserializer=eventstore__pb2.PeekQueueResponse.FromString,
                )
        self.Lock = channel.unary_unary(
                '/protob.Queue/Lock',
                request_serializer=eventstore__pb2.LockRequest.SerializeToString,
                response_deserializer=eventstore__pb2.LockResponse.FromString,
                )
        self.Unlock = channel.unary_unary(
                '/protob.Queue/Unlock',
                request_serializer=eventstore__pb2.UnlockRequest.SerializeToString,
                response_deserializer=eventstore__pb2.UnlockResponse.FromString,
                )


class QueueServicer(object):
    """Queue interface
    """

    def New(self, request, context):
        """New queue
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAll(self, request, context):
        """GetAll all elements in queue
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Len(self, request, context):
        """Len for the queue
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Del(self, request, context):
        """Del queue
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Push(self, request, context):
        """Push value in map
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Index(self, request, context):
        """Index returns the element at the index
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Pop(self, request, context):
        """Pop retrieves and removes an element from the queue
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Peek(self, request, context):
        """Peek retrieves an element from the queue
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Lock(self, request, context):
        """Lock the key for exclusive access
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unlock(self, request, context):
        """Unlock the key
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueueServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'New': grpc.unary_unary_rpc_method_handler(
                    servicer.New,
                    request_deserializer=eventstore__pb2.NewQueueRequest.FromString,
                    response_serializer=eventstore__pb2.NewQueueResponse.SerializeToString,
            ),
            'GetAll': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAll,
                    request_deserializer=eventstore__pb2.GetAllQueueItemsRequest.FromString,
                    response_serializer=eventstore__pb2.GetAllQueueItemsResponse.SerializeToString,
            ),
            'Len': grpc.unary_unary_rpc_method_handler(
                    servicer.Len,
                    request_deserializer=eventstore__pb2.LenQueueRequest.FromString,
                    response_serializer=eventstore__pb2.LenQueueResponse.SerializeToString,
            ),
            'Del': grpc.unary_unary_rpc_method_handler(
                    servicer.Del,
                    request_deserializer=eventstore__pb2.DelQueueRequest.FromString,
                    response_serializer=eventstore__pb2.DelQueueResponse.SerializeToString,
            ),
            'Push': grpc.unary_unary_rpc_method_handler(
                    servicer.Push,
                    request_deserializer=eventstore__pb2.PushQueueRequest.FromString,
                    response_serializer=eventstore__pb2.PushQueueResponse.SerializeToString,
            ),
            'Index': grpc.unary_unary_rpc_method_handler(
                    servicer.Index,
                    request_deserializer=eventstore__pb2.IndexQueueRequest.FromString,
                    response_serializer=eventstore__pb2.IndexQueueResponse.SerializeToString,
            ),
            'Pop': grpc.unary_unary_rpc_method_handler(
                    servicer.Pop,
                    request_deserializer=eventstore__pb2.PopQueueRequest.FromString,
                    response_serializer=eventstore__pb2.PopQueueResponse.SerializeToString,
            ),
            'Peek': grpc.unary_unary_rpc_method_handler(
                    servicer.Peek,
                    request_deserializer=eventstore__pb2.PeekQueueRequest.FromString,
                    response_serializer=eventstore__pb2.PeekQueueResponse.SerializeToString,
            ),
            'Lock': grpc.unary_unary_rpc_method_handler(
                    servicer.Lock,
                    request_deserializer=eventstore__pb2.LockRequest.FromString,
                    response_serializer=eventstore__pb2.LockResponse.SerializeToString,
            ),
            'Unlock': grpc.unary_unary_rpc_method_handler(
                    servicer.Unlock,
                    request_deserializer=eventstore__pb2.UnlockRequest.FromString,
                    response_serializer=eventstore__pb2.UnlockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'protob.Queue', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Queue(object):
    """Queue interface
    """

    @staticmethod
    def New(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Queue/New',
            eventstore__pb2.NewQueueRequest.SerializeToString,
            eventstore__pb2.NewQueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Queue/GetAll',
            eventstore__pb2.GetAllQueueItemsRequest.SerializeToString,
            eventstore__pb2.GetAllQueueItemsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Len(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Queue/Len',
            eventstore__pb2.LenQueueRequest.SerializeToString,
            eventstore__pb2.LenQueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Del(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Queue/Del',
            eventstore__pb2.DelQueueRequest.SerializeToString,
            eventstore__pb2.DelQueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Push(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Queue/Push',
            eventstore__pb2.PushQueueRequest.SerializeToString,
            eventstore__pb2.PushQueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Index(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Queue/Index',
            eventstore__pb2.IndexQueueRequest.SerializeToString,
            eventstore__pb2.IndexQueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Pop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Queue/Pop',
            eventstore__pb2.PopQueueRequest.SerializeToString,
            eventstore__pb2.PopQueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Peek(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Queue/Peek',
            eventstore__pb2.PeekQueueRequest.SerializeToString,
            eventstore__pb2.PeekQueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Lock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Queue/Lock',
            eventstore__pb2.LockRequest.SerializeToString,
            eventstore__pb2.LockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unlock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/protob.Queue/Unlock',
            eventstore__pb2.UnlockRequest.SerializeToString,
            eventstore__pb2.UnlockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
